# Workflow loosely inspired by https://cristianadam.eu/20191222/using-github-actions-with-c-plus-plus-and-cmake/
# but ended up drifting very, very far from it.

name: Nightly Build

on: [push, pull_request]

# Github action workers have 2 cores, let's use them while building!
env:
  CMAKE_BUILD_PARALLEL_LEVEL: 2

jobs:
  # I opted to use two separate builds, because for my use-case, I feel that it makes things clearer.
  # Otherwise, you have to wade through platform specific steps for windows and linux and it just gets hairy.
  linux:
    # I would cache the SFML build on Linux, but it's just simply not worth it. Dependencies/libraries
    # are thrown all over the place in /usr, and caching the entire folder makes the action take too long,
    # and granualarly caching what gets written to disk is too much to maintain.
    #
    # Maybe if Github Actions would cache layers of jobs ran in containers (see: jobs.<id>.container)
    # then it'd be worth it to cache it, but otherwise, oh well. It's still faster than the windows build anyways.
    name: Linux Build
    runs-on: ubuntu-20.04
    steps:
      # SortingVisualizer statically links against SFML. Say what you want, but I prefer distributing a single binary.
      # Because of this, instead of just installing `libsfml-dev`, we have to build it from source to support static linking.
      - name: Build SFML
        # OpenGL deps: via trial and error, and partially https://stackoverflow.com/a/14966717
        # SFML deps: https://www.sfml-dev.org/tutorials/2.5/compile-with-cmake.php and https://medium.com/@Rewieer/install-sfml-2-5-1-on-ubuntu-18-04-and-clion-9e0dfe86e87f
        run: |
          echo y | sudo apt-fast install \
            libxcursor-dev mesa-common-dev \
            libfreetype6-dev libxrandr-dev libudev-dev libogg-dev libflac-dev libvorbis-dev libopenal-dev

          # build SFML from source
          git clone https://github.com/SFML/SFML --depth 1
          pushd SFML
            cmake -B build -DBUILD_SHARED_LIBS=FALSE
            cmake --build build --config Release
            sudo cmake --install build --config Release
          popd
          rm -rf SFML

      - name: Checkout Source
        uses: actions/checkout@v2.3.4

      - name: Build Project
        run: |
          cmake -B build
          cmake --build build --config Release --
          cmake --install build --config Release
          strip '${{ github.workspace }}/build/SortingVisualizer'

      # Github Actions will always zip artifacts by default, so there's no point going through the effort
      # of making a tar archive of the build.
      - name: Upload Build
        uses: actions/upload-artifact@v2.2.1
        with:
          name: linux
          path: ${{ github.workspace }}/build/SortingVisualizer

  windows:
    name: Windows Build
    runs-on: windows-latest
    steps:
      # A majority of the time spent is primarily due to building SFML
      # On windows, the final SFML build is all stored in C:\Program Files (x86)\SFML
      # The only thing we have to cache is that directory, and actions/cache takes care of the rest
      - name: Cache SFML Build
        id: cache-sfml
        uses: actions/cache@v2.1.3
        with:
          path: C:\Program Files (x86)\SFML
          key: sfml

      - name: Build SFML
        if: steps.cache-sfml.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/SFML/SFML --depth 1
          pushd SFML
            cmake -B build -DSFML_USE_STATIC_STD_LIBS=TRUE -DBUILD_SHARED_LIBS=FALSE
            cmake --build build --config Release
            cmake --install build --config Release
          popd
          rm -Recurse -Force SFML

      - name: Checkout Source
        uses: actions/checkout@v2.3.4

      - name: Build Project
        run: |
          cmake -B build
          cmake --build build --config Release
          cmake --install build --config Release

      # Github Actions will always zip artifacts by default, so there's no point going through the effort
      # of making a tar archive of the build.
      - name: Upload Build
        uses: actions/upload-artifact@v2.2.1
        with:
          name: windows
          path: ${{ github.workspace }}\build\Release\SortingVisualizer.exe
